const chai = require('chai');
const chaiHttp = require('chai-http');
const assert = require('chai').assert;
const app = require('../app');

const studentModel = require('../models/studentModel');
const testParams = require('./data/testUserSet');
const testUtils = require('./testUtils');

chai.use(chaiHttp);

// This test shall test the following:
// - Add 2 valid students, then make various (invalid and valid) modifications to it




describe('Users', function () {
    before(async function () {
        await studentModel.deleteMany({});
    });

    it('Verify database is empty, verify response code (200)', async function () {
        try {
            const response = await chai.request(app).get('/students');
            testUtils.checkBodyLength(response, 0);
            testUtils.checkResStatus(response, 200);
            testUtils.checkHeaderOnSuccess(response);
        } catch (err) {
            throw err;
        }
    });

    it('Add a user 0, verify user 0 returns, verify response code (201)', async function () {

        try {
            const response = await chai.request(app).post('/students').send(testParams.validUsers.test_user_0);
            assert.ownInclude(response.body, testParams.validUsers.test_user_0, 'UserA should be returned in response');
            assert.equal(response.status, 201, 'Response should be 201');
            assert.equal(response.headers["content-type"] === 'application/json; charset=utf-8', true, 'Headers should match');
        } catch (err) {
            throw err;
        }

    })

    it('Add a user 1, verify user 1 returns, verify response code (201)', async function () {

        try {
            const response = await chai.request(app).post('/students').send(testParams.validUsers.test_user_1);
            assert.equal(response.status, 201, 'Response should be 201');
            assert.equal(response.headers["content-type"] === 'application/json; charset=utf-8', true, 'Headers should match');
        } catch (err) {
            throw err;
        }

    })

    it('Delete user 0 by the unique provided id', async function () {

        try {
          const response = await chai.request(app).del(`/students/${testParams.validUsers.test_user_0._id}`);
          assert.equal(response.status, 200, 'Response should be 200');
        } catch (err) {
          throw err;
        }
    
      });

      it('Attempt to Delete user 0 again by the unique provided id', async function () {

        try {
          const response = await chai.request(app).del(`/students/${testParams.validUsers.test_user_0._id}`);
          assert.equal(response.status, 400, 'Response should be 400');
        } catch (err) {
          throw err;
        }
    
      });
    
    
      it('Delete (nonexistent) user by id with very long (invalid) id, verify response code (400)', async function () {
    
        try {
          const response = await chai.request(app).del(`/students`);
          assert.equal(response.status, 400, 'Response should be 400');
        } catch (err) {
          throw err;
        }
    
      })
    
      it('Delete (nonexistent) user by id with special characters, verify response code (400)', async function () {
    
        try {
          const response = await chai.request(app).del(`/students/~!@#$%^&*()_+{}|:"<>?,./;[]'`);
          assert.equal(response.status, 400, 'Response should be 400');
        } catch (err) {
          throw err;
        }
    
      })
    
      it('Delete user with an incorrect route name (/studen) , verify response code (404)', async function () {
    
        try {
          const response = await chai.request(app).del(`/studen/123`);
          assert.equal(response.status, 404, 'Response should be 404');
        } catch (err) {
          throw err;
        }
    
      })
    
    
      it('Delete user 1, but add something to the id', async function () {
        try {
          const response = await chai.request(app).del(`/students/${testParams.validUsers.test_user_1._id + 1}`);
          assert.equal(response.status, 400, 'Response should be 400');
        } catch (err) {
          throw err;
        }
      });


      it('Actually delete user 1 by the unique provided id', async function () {
        try {
          const response = await chai.request(app).del(`/students/${testParams.validUsers.test_user_1._id}`);
          assert.equal(response.status, 200, 'Response should be 200');
        } catch (err) {
          throw err;
        }
      });



    after(async function () {
        await studentModel.deleteMany({});
    });

});