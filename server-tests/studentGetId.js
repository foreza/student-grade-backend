const chai = require('chai');
const chaiHttp = require('chai-http');
const assert = require('chai').assert;
const app = require('../app');

const studentModel = require('../models/studentModel');
const testParams = require('./data/testUserSet');
const testUtils = require('./testUtils');


chai.use(chaiHttp);

/*

Advanced Student API test (GET by id)

- (GET) Gets a student by a missing/invalid/badly formatted ID or some equivalent
  * Super long numeric id
  * Unexpected characters
  * Wrong route name
  * non-existent
*/

describe('Users', function () {
  before(async function () {

    await studentModel.deleteMany({}).then(async function () {
      try {
        await chai.request(app).post('/students').send(testParams.validUsers.test_user_1);
      } catch (err) {
        throw err;
      }
      
    });

  });

  it('Get all users after test setup', async function () {
    try {
      const response = await chai.request(app).get('/students');
      testUtils.checkBodyLength(response, 1);
      testUtils.checkResStatus(response, 200);
      testUtils.checkHeaderOnSuccess(response);
    } catch (err) {
      throw err;
    }

  });

  it('Get user by the unique provided id', async function () {

    try {
      const response = await chai.request(app).get(`/students/${testParams.validUsers.test_user_1._id}`);
      assert.ownInclude(response.body, testParams.validUsers.test_user_1, 'Should be the same user');
      assert.equal(response.status, 200, 'Response should be 200');
    } catch (err) {
      throw err;
    }

  });


  it('Get user by id with very long (invalid) id, verify response code (400)', async function () {

    try {
      const response = await chai.request(app).get(`/students`);
      assert.equal(response.status, 400, 'Response should be 404');
    } catch (err) {
      throw err;
    }

  })

  it('Get user by id with special characters, verify response code (400)', async function () {

    try {
      const response = await chai.request(app).get(`/students/~!@#$%^&*()_+{}|:"<>?,./;[]'`);
      assert.equal(response.status, 400, 'Response should be 400');
    } catch (err) {
      throw err;
    }

  })

  it('Get user with an incorrect route name (/studen) , verify response code (404)', async function () {

    try {
      const response = await chai.request(app).get(`/studen/123`);
      assert.equal(response.status, 404, 'Response should be 404');
    } catch (err) {
      throw err;
    }

  })

  it('Get user with a nonexisting student , verify response code (404)', async function () {

    try {
      const response = await chai.request(app).get(`/student/123`);
      assert.equal(response.status, 404, 'Response should be 404');
    } catch (err) {
      throw err;
    }

  })

  it('Get user (again) by the unique provided id', async function () {
    try {
      const response = await chai.request(app).get(`/students/${testParams.validUsers.test_user_1._id}`);
      assert.ownInclude(response.body, testParams.validUsers.test_user_1, 'Should be the same user');
      assert.equal(response.status, 200, 'Response should be 200');
    } catch (err) {
      throw err;
    }
  });

  it('Get user (again) by the unique provided id, but add something to the id', async function () {
    try {
      const response = await chai.request(app).get(`/students/${testParams.validUsers.test_user_1._id + 1}`);
      assert.equal(response.status, 400, 'Response should be 400');
      assert.notOwnInclude(response.body, testParams.validUsers.test_user_1, 'Should NOT be the same user');
    } catch (err) {
      throw err;
    }
  });

  after(async function () {
    await studentModel.deleteMany({});
  });

});